#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node_s node_t;
typedef struct list_s list_t;
typedef struct stack_s stack_t;

struct node_s {
  int datalen;
  int* data;
  node_t* next;
  list_t *list;;
};

struct list_s {
  int size;
  node_t* head;
  node_t* tail;
};

list_t* list() {
  list_t* l;
  l = (list_t *) malloc (sizeof(list_t));
  l->size = 0;
  l->head = NULL;
  l->tail = NULL;
  return l;
}

int append(list_t* l, node_t* n) {
  if (l == NULL)
    return -1;

  if (l->size == 0) {
    n->list = NULL;
    n->next = NULL;
    l->head = n;
    l->tail = n;
    l->size++;
  } else {
    n->list = NULL;
    n->next = NULL;
    l->tail->next = n;
    l->tail = n;
    l->size++;
  }
  return 0;
}
// return 0 if data find, else return 0;
// l : list, i : index, d = find data
node_t* search1(list_t *l, int i, int d) {
  node_t* r; // runner
  r = l->head;

  while (r) {
    if (r->data[i] == d) return r;
    r = r->next;
  }
  return NULL; 
}

int search2(list_t *l, int n, int *d) {
  node_t* r; // runner
  int i, flag = 0;
  r = l->head;
  while (r) {
    flag = 0;
    for (i = 0; i < n; i++)
      if (r->data[i] != d[i]) flag = -1;
    if (flag == 0) return 0;
    else return -1;
    r = r->next;
  }
  return -1;
}

struct stack_s {
  int size;
  node_t* top;
};

stack_t* stack() {
  stack_t* s;
  s = (stack_t *) malloc (sizeof(stack_t));
  s->size = 0;
  s->top = 0;
  return s;
}

int push(stack_t* s, node_t* n) {
  if (s == NULL)
    return -1;

  if (s->size == 0) {
    s->top = n;
    s->size++;
  } else {
    n->next = s->top;
    s->top = n;
    s->size++;
  }
  return 0;
}

node_t* pop(stack_t* s) {
  node_t* temp;
  if (s == NULL)
    return NULL;

  if (s->size == 0) {
    return  NULL;
  } else {
   temp = s->top;
   s->top = temp->next;
   return temp;
  }
}

int get_numberofcase(int m, int c, int *mc) {
  stack_t* s = NULL;
  node_t* n = NULL;
  node_t* sn = NULL; // stack node
  list_t* l1 = NULL; // list1
  list_t* l2 = NULL; // list2
  node_t* l1n = NULL; // list node
  int num = 0;
  int *mcn;
  int i, j = 0;
  int rc = 0;

  mcn = (int *) malloc (sizeof(int) * c);

  for (i = 0; i < c; i++) 
    mcn[i] = m / mc[i];

  s = stack();
  j = 0;
  for (i = 0; i < mcn[j] + 1; i++) {
    if (c % mc[i] == 0) {
      n = (node_t *) malloc (sizeof(node_t)); 
      memset(n, 0x00, sizeof(node_t));
      n->datalen = c + 1;
      n->data = (int *) malloc (sizeof(int) * (c+1));

      n->data[j] = i;
      n->data[c] = m - (mc[j] * i); 
      push(s, n);
    }
  }
  j++;


  while (s->size != 0) {
    sn = pop(s); 

    if (j == c-1) {
      // find case
      if (l1 == NULL) {
        l1 = list();
      } else {
        l1n = search(l1, c, m);  
        if (l1n == NULL) {
          // found
          
        } else {
          // not found
          n = (node_t *) malloc (sizeof(node_t));
          memset(n, 0x00, sizeof(node_t));
          n->datalen = 1;
          n->data = (int *) malloc (sizeof(int));
          
          n->data[0] = m; // final
          append(l1, n);
        }
      }
      
    }


    
    j++;
  }

  free(s);
  free(mcn);
  return num;
}

int main() {
  int tc = 0; /* test case */
  int i, j = 0;
  int m, c = 0;
  int *mc;
  int rc = 0;

  scanf("%d", &tc);

  for (i = 0; i < tc ; i++ ) {
    scanf("%d %d", &m, &c);

    mc = (int *) malloc (sizeof(int) * m);
    for (j = 0; j < m; j++) {
      scanf("%d", &mc[j]);
    }
    rc = get_numberofcase(m, c, mc);

    free(mc);

  }

  return 0;
}
